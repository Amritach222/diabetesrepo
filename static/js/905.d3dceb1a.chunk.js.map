{"version":3,"file":"static/js/905.d3dceb1a.chunk.js","mappings":"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","sources":["views/widgets/WidgetsDropdown.js","views/dashboard/Dashboard.js"],"sourcesContent":["import React , {useEffect,useState} from 'react'\nimport Axios from 'axios'\nimport {\n  CRow,\n  CCol,\n  // CDropdown,\n  // CDropdownMenu,\n  // CDropdownItem,\n  // CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport data from \"@coreui/coreui/js/src/dom/data\";\n// import CIcon from '@coreui/icons-react'\n// import { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\n\nconst WidgetsDropdown = () => {\n  let s_data=[]\n  const [totalEntry, setTotalentry] = useState(0)\n  const [sugarlevel, setSugarlevel] = useState(0)\n  const [exercisedays, setExercisedays] = useState(0)\n  const [sugardata,setSugardata]=useState([])\n  let id=localStorage.getItem('userId')\n\n  useEffect(()=>\n  {\n    Axios.put( 'http://localhost:3001/api/users/getuser/',{\n      user_id:id\n       })\n       .then((res) => {\n         //handle success\n         if(res.data.success==1)\n         {\n          const username=res.data.data.name;\n\n          Axios.put( 'http://localhost:3001/api/userDetails/getDetails/',{\n            username:username\n           })\n           .then(async (res) => {\n             //handle success\n             if(res.data.data)\n             {\n               let user_details=res.data.data;\n\n\n               //Counting total user entries\n            let user_details_count= user_details.length;\n            setTotalentry(user_details_count);\n\n              //Fetching and counting total insulin entries of recent one month\n             const sugar_level = user_details.filter((item)=>\n             item.sugar_level\n             );\n             //using map function to set array data\n               user_details.map((item)=>{\n                 if(item.sugar_level){\n                   s_data.push(Math.round(parseInt(item.sugar_level)/5));\n                 }\n               })\n               await setSugardata(s_data)\n             const sugar_level_count=sugar_level.length;\n             setSugarlevel(sugar_level_count);\n\n             //Fetching and counting total exercise entries of last one month\n\n             const exercise_days = user_details.filter((item)=>\n             item.exercise_time\n\n             );\n             const exercise_days_count=exercise_days.length;\n             setExercisedays(exercise_days_count);\n\n              }\n              else\n              {\n                console.log(\"Fetching Error\")\n              }\n            })\n            .catch((res) => {\n              //handle error\n              console.log(res)\n            })\n          }\n          else\n          {\n            alert(\"usernameNot Obtained\")\n          }\n        })\n        .catch((res) => {\n          //handle error\n          console.log(res)\n        })\n\n  },[])\n\n\n  return (\n    <CRow className=\"d-flex justify-content-between\">\n      <CCol style={{ width: '33.33%' }} sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n\n            totalEntry\n\n\n          }\n          title=\"Your Total Entries\"\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: [65, 59, 84, 84, 51, 55, 40],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol style={{ width: '33.33%' }} sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            sugarlevel\n          }\n          title=\"Your Sugar Entries\"\n\n\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                // labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                labels: sugardata,\n                datasets: [\n                  {\n                    label: 'My sugar level indicator',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data:sugardata\n                    // data: [1, 18, 9, 17, 34, 22, 11],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -9,\n                    max: 39,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      {/* <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              2.49{' '}\n              <span className=\"fs-6 fw-normal\">\n                (84.7% <CIcon icon={cilArrowTop} />)\n              </span>\n            </>\n          }\n          title=\"Conversion Rate\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40],\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol> */}\n      <CCol style={{ width: '33.33%' }} sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"danger\"\n          value={\n\n            exercisedays\n\n          }\n          title=\"Your Exercise Days\"\n\n          chart={\n            <CChartBar\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: [\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                  'May',\n                  'June',\n                  'July',\n                  'August',\n                  'September',\n                  'October',\n                  'November',\n                  'December',\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                ],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                    barPercentage: 0.6,\n                  },\n                ],\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","import React, {useEffect, useState} from 'react'\n\nimport {\n  // CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol, CFormInput, CImage, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibGoogle,\n  cibFacebook,\n  cibLinkedin,\n\n  cibTwitter,\n  cilCloudDownload,\n  cilUser,\n  cilUserFemale,\n  cilPencil,\n} from '@coreui/icons'\nimport DriveFileRenameOutlineIcon from '@mui/icons-material/DriveFileRenameOutline';\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport Axios from \"axios\";\nimport {toast, ToastContainer} from 'react-toastify'\n// Import toastify css file\nimport 'react-toastify/dist/ReactToastify.css';\nconst beans=require('./foodImages/beans.jpg')\nconst  brocouli=require('./foodImages/broccoli-florets.webp')\nconst  eggs=require('./foodImages/Brown-eggs.webp')\nconst  fish=require('./foodImages/fattyfish.webp')\nconst  garlic=require('./foodImages/garlic-benefits-for-heart.jpg')\nconst  yogurt=require('./foodImages/greek-yogurt-social.jpg')\nconst  greens=require('./foodImages/leafy greens.jpg')\nconst  nuts=require('./foodImages/Nuts.jpg')\nconst  seeds=require('./foodImages/side-effects-of-flax-seeds.webp')\nconst  strawberry=require('./foodImages/strawberry.jfif')\nconst Dashboard = () => {\n  const random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n  const [user,setUser]=useState();\n  const [id,setId]=useState();\n  const [userTable,setUserTable]=useState([])\n  const [visible, setVisible] = useState(false)\n  const [updateData,setUpdateData]=useState({})\n  // set datas\n  const [sugar,setSugar]=useState('')\n  const [breakfast,setBreakfast]=useState('')\n  const [lunch,setLunch]=useState('')\n  const [dinner,setDinner]=useState('')\n  const [etime,setEtime]=useState('')\n  useEffect( ()=>{\n    let userId=localStorage.getItem('userId')\n     Axios.put('http://localhost:3001/api/users/getUserdetails',\n      {id:userId}).then((res)=>{\n        if(res.data.data){\n          const username=res.data.data[0].name\n          setUser(username)\n            Axios.put('http://localhost:3001/api/userDetails/getTenDetails/',{\n              username:username\n            }).then((res)=>{\n              if (res.data.data){\n                setUserTable(res.data.data.reverse())\n              }\n            })\n\n        }\n    }).catch((error)=>{\n      console.log(\"Error Occured\",error)\n    })\n  },[visible])\n  const progressExample = [\n    { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n    { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n    { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n    { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n    { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  ]\n\n  const progressGroupExample1 = [\n    { title: 'Monday', value1: 34, value2: 78 },\n    { title: 'Tuesday', value1: 56, value2: 94 },\n    { title: 'Wednesday', value1: 12, value2: 67 },\n    { title: 'Thursday', value1: 43, value2: 91 },\n    { title: 'Friday', value1: 22, value2: 73 },\n    { title: 'Saturday', value1: 53, value2: 82 },\n    { title: 'Sunday', value1: 9, value2: 69 },\n  ]\n\n  const progressGroupExample2 = [\n    { title: 'Male', icon: cilUser, value: 53 },\n    { title: 'Female', icon: cilUserFemale, value: 43 },\n  ]\n  const progressGroupExample3 = [\n    { title: 'Organic Search', icon: cibGoogle, percent: 56, value: '191,235' },\n    { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n    { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n    { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  ]\n\n\nconst handlleEdit=(data,e)=>{\n  setVisible(!visible)\n  setId(data.id)\n  setSugar(data.sugar_level)\n  setBreakfast(data.morning_meal)\n  setLunch(data.launch)\n  setDinner(data.dinner)\n  setEtime(data.exercise_time)\n}\n\n// defining  onchage handler\n  const changeSuagr=(e)=>{\n    setSugar(e.target.value)\n  }\n  const changeBreakfast=(e)=>{\n    setBreakfast(e.target.value)\n  }\n  const chageLunch=(e)=>{\n    setLunch(e.target.value)\n  }\n  const chageDinner=(e)=>{\n    setDinner(e.target.value)\n  }\n  const chageExerciseTime=(e)=>{\n    setEtime(e.target.value)\n  }\n  // update data to the database\n  const submitData=()=>{\n    Axios.put('http://localhost:3001/api/userDetails/updateMealInfo/',\n      {\n        user:user,\n        sugar:sugar,\n        breakfast:breakfast,\n        lunch:lunch,\n        dinner:dinner,\n        etime:etime,\n        id:id\n      }).then((res)=>{\n        if (res.data.success===1){\n          setVisible(false)\n          toast(\"Successfully Updated\");\n          // window.location.reload(true)\n        }\n        else{\n          alert(\"error occured\")\n        }\n    }).catch((error)=>{\n      console.log(\"Error occured\", error)\n    })\n  }\n  return (\n    <>\n      <ToastContainer/>\n      <WidgetsDropdown />\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Food Analysis\n              </h4>\n              <div className=\"small text-medium-emphasis\">June - July 2022</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Day', 'Month', 'Year'].map((value) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === 'Month'}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'My First dataset',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                  fill: true,\n                },\n                {\n                  label: 'My Second dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-success'),\n                  pointHoverBackgroundColor: getStyle('--cui-success'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                },\n                {\n                  label: 'My Third dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-danger'),\n                  pointHoverBackgroundColor: getStyle('--cui-danger'),\n                  borderWidth: 1,\n                  borderDash: [8, 5],\n                  data: [65, 65, 65, 65, 65, 65, 65],\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      {/* <WidgetsBrand withCharts /> */}\n\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4 p-3\">\n          <div className=\"container\">\n            <p id=\"traffic\" className=\"card-title mb-0\">\n              Best foods for people living with diabetes\n            </p>\n            <hr/>\n            <div className=\" my-2 d-flex justify-content-around\">\n              <div className='image_container d-flex flex-wrap justify-content-around'>\n              <div className=\"foodImage mx-1\"><CImage rounded src={beans} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={brocouli} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={greens} width={200} height={200} /></div>\n            </div>\n            </div>\n            <div className=\"d-flex justify-content-around\">\n              <div className='image_container d-flex flex-wrap justify-content-around'>\n              <div className=\"foodImage mx-1\"><CImage rounded src={eggs} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={garlic} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={yogurt} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={fish} width={200} height={200} /></div>\n            </div>\n            </div>\n            <div className=\"my-2 d-flex justify-content-around\">\n              <div className='image_container d-flex flex-wrap justify-content-around'>\n              <div className=\"foodImage mx-1\"><CImage rounded src={nuts} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={seeds} width={200} height={200} /></div>\n              <div className=\"foodImage mx-1\"><CImage rounded src={strawberry} width={200} height={200} /></div>\n              </div>\n            </div>\n          </div>\n\n\n          </CCard>\n        </CCol>\n      </CRow>\n      {/* <WidgetsBrand withCharts /> */}\n\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Your recent activities</CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive style={{fontSize:'12px'}}>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">S.N</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Sugar Level</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Break Fast</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Lunch</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Dinner</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Exercise Time</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Action</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {\n                    userTable.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell className=\"text-center\">{index+1}</CTableDataCell>\n                      <CTableDataCell className=\"text-center\" >{item.sugar_level} mg/dL</CTableDataCell>\n                      <CTableDataCell className=\"text-center\">{item.morning_meal}</CTableDataCell>\n                      <CTableDataCell className=\"text-center\">{item.launch}</CTableDataCell>\n                      <CTableDataCell className=\"text-center\">{item.dinner}</CTableDataCell>\n                      <CTableDataCell className=\"text-center\">{item.exercise_time}  minutes</CTableDataCell>\n                      <CTableDataCell className=\"text-center text-primary\" style={{cursor:'pointer'}} onClick={(e) =>{handlleEdit(item,e)} }><CIcon icon={cilPencil} /></CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n\n            </CCardBody>\n            <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n              <CModalHeader>\n                <CModalTitle>Update your meal detail</CModalTitle>\n              </CModalHeader>\n              <CModalBody>\n                  <div className=\"update_meal_container\">\n                      <div className=\"form_row d-flex justify-content-between\">\n                        <div className=\"sugar_container\">\n                        <CFormInput\n                          value={sugar}\n                          contentEditable={true}\n                          type=\"number\"\n                          name=\"username\"\n                          feedbackValid=\"Looks good!\"\n                          id=\"validationCustom01\"\n                          label=\"Sugar level\"\n                          required\n                          onChange={(e)=>{changeSuagr(e)}}\n                        />\n                        </div>\n                        <div className=\"breakfast_container ms-3\">\n                        <CFormInput\n                          value={breakfast}\n                          contentEditable={true}\n                          type=\"text\"\n                          name=\"username\"\n                          feedbackValid=\"Looks good!\"\n                          id=\"validationCustom01\"\n                          label=\"Breakfast\"\n                          required\n                          onChange={(e)=>{changeBreakfast(e)}}\n                        />\n                        </div>\n                      </div>\n                      <div className=\"form_row d-flex justify-content-between\">\n                        <div className=\"sugar_container\">\n                          <CFormInput\n                            value={lunch}\n                            contentEditable={true}\n                            type=\"text\"\n                            name=\"username\"\n                            feedbackValid=\"Looks good!\"\n                            id=\"validationCustom01\"\n                            label=\"Lunch\"\n                            required\n                            onChange={(e)=>{chageLunch(e)}}\n                          />\n                        </div>\n                        <div className=\"breakfast_container ms-3\">\n                          <CFormInput\n                            value={dinner}\n                            contentEditable={true}\n                            type=\"text\"\n                            name=\"username\"\n                            feedbackValid=\"Looks good!\"\n                            id=\"validationCustom01\"\n                            label=\"Dinner\"\n                            required\n                            onChange={(e)=>{chageDinner(e)}}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"form_row d-flex\">\n                        <div className=\"breakfast_container\">\n                          <CFormInput\n                            value={etime}\n                            contentEditable={true}\n                            type=\"number\"\n                            name=\"username\"\n                            feedbackValid=\"Looks good!\"\n                            id=\"validationCustom01\"\n                            label=\"Exercise time\"\n                            required\n                            onChange={(e)=>{chageExerciseTime(e)}}\n                          />\n                        </div>\n                      </div>\n                  </div>\n              </CModalBody>\n              <CModalFooter>\n                <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n                  Close\n                </CButton>\n                <CButton color=\"primary\" onClick={submitData}>Save changes</CButton>\n              </CModalFooter>\n            </CModal>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["s_data","useState","totalEntry","setTotalentry","sugarlevel","setSugarlevel","exercisedays","setExercisedays","sugardata","setSugardata","id","localStorage","getItem","useEffect","Axios","user_id","then","res","data","success","username","name","user_details","user_details_count","length","sugar_level","filter","item","map","push","Math","round","parseInt","sugar_level_count","exercise_days","exercise_time","exercise_days_count","console","log","catch","alert","className","style","width","sm","lg","color","value","title","chart","height","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","getStyle","options","plugins","legend","display","maintainAspectRatio","scales","x","grid","drawBorder","ticks","y","min","max","elements","line","borderWidth","tension","point","radius","hitRadius","hoverRadius","barPercentage","drawTicks","beans","require","brocouli","eggs","fish","garlic","yogurt","greens","nuts","seeds","strawberry","random","floor","user","setUser","setId","userTable","setUserTable","visible","setVisible","sugar","setSugar","breakfast","setBreakfast","lunch","setLunch","dinner","setDinner","etime","setEtime","userId","reverse","error","cilUser","cilUserFemale","cibGoogle","cibFacebook","cibTwitter","cibLinkedin","icon","cilCloudDownload","active","marginTop","hexToRgba","pointHoverBackgroundColor","fill","borderDash","drawOnChartArea","beginAtZero","maxTicksLimit","stepSize","ceil","hoverBorderWidth","xs","rounded","src","align","hover","responsive","fontSize","index","morning_meal","launch","cursor","onClick","e","handlleEdit","cilPencil","alignment","onClose","contentEditable","type","feedbackValid","required","onChange","target","changeSuagr","changeBreakfast","chageLunch","chageDinner","chageExerciseTime","toast"],"sourceRoot":""}