{"version":3,"file":"static/js/733.67fbfcc9.chunk.js","mappings":"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","sources":["views/pages/login/Login.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Link ,useNavigate} from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport TextField from '@mui/material/TextField'\nimport Button from '@mui/material/Button'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport Axios from 'axios'\nimport login_image from \"../../../assets/images/diabetes/loginAnimation.png\"\nimport healthyfood_image from \"../../../assets/images/diabetes/healthy_food.jpg\"\n\nconst Login = ({ updateUser }) => {\n  const [displayError, setdisplayerror] = useState('');\n  const navigate = useNavigate();\n  const [userLogin, setuserLogin] = useState({\n    email: '',\n    password: '',\n  })\n\n  Login.propTypes = {\n    updateUser: PropTypes.object.isRequired,\n  }\n\n  const handleInput = (event) => {\n    const name = event.target.name\n    const value = event.target.value\n    setuserLogin({ ...userLogin, [name]: value })\n    // console.log(name, value)\n    setdisplayerror(\"\")\n  }\n\n  const loginUser = async (e) => {\n    // <Link to='/' />\n    e.preventDefault()\n    const { email, password } = userLogin\n    // console.log(username)\nif(email == '' || password== '')\n{\n  setdisplayerror(\"Fields cannot be empty\")\n}\nelse\n{\n\n    Axios.post('http://localhost:3001/api/users/login', {\n      email: email,\n      password: password,\n    })\n      .then((res) => {\n        //handle error\n        // console.log(res)\n        if(res.data.success===0)\n        {\n         \n          const message=res.data.data;\n          console.log(res.data)\n          setdisplayerror(`${message}`)\n        }\n        //handle success\n        if (res.data.success===1) {\n          // alert(res.data.data);\n          Axios.put('http://localhost:3001/api/users/userbyemail',\n            {email:email,password:password}).then((res)=>{\n              if(res.data.data){\n                const id=res.data.data.id;\n                console.log(\"data\", res.data.data)\n                  localStorage.setItem('userId',id);\n                  \n              }\n              else{\n                console.log(\"data Not received\")\n              }\n          }). catch((error)=>{\n            console.log(\"Server error\", error)\n          })\n          updateUser(userLogin);\n          navigate('/dashboard')\n        }\n      })\n      .catch((res) => {\n        //handle error\n        console.log(res)\n      })\n  }\n}\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer >\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup style={{boxShadow:\"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\"}}>\n              <CCard className=\"p-4\" >\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      \n                      <TextField\n                      style={{ width: '100%' }}\n                      name=\"email\"\n                      id=\"email\"\n                      autoComplete=\"off\"\n                      value={userLogin.email}\n                      onChange={handleInput}\n                      label=\"Email\"\n                      type=\"email\"\n                      variant=\"standard\"\n                    />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-1\">\n                     \n\n                      <TextField\n                      style={{ width: '100%' }}\n                      name=\"password\"\n                      id=\"password\"\n                      autoComplete=\"off\"\n                      value={userLogin.password}\n                      onChange={handleInput}\n                      label=\"Password\"\n                      type=\"password\"\n                      variant=\"standard\"\n                    />\n                    </CInputGroup>\n\n\n                    <CRow>\n                    <span className='text-danger ms-1 mb-3'>{displayError}</span>\n                      <CCol xs={6}>\n        \n\n                        <Button\n                      variant=\"contained\"\n                      type=\"submit\"\n                      onClick={loginUser}\n                    \n                    >Log in</Button>\n                      </CCol>\n\n<Link to='/forgotpassword'>\n  \n                      <CCol xs={6} className=\"text-right\">\n                   \n                        \n                        <CButton color=\"link\" className=\"px-0\"  style={{\n                      \n                      color: 'blue',\n                      fontStyle: 'italic',\n                      marginLeft: '8px',\n              \n                    }}>\n                          Forgot password?\n                        </CButton>\n                      \n                      </CCol>\n</Link>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-black bg-gradient py-5\" style={{ width: '44%'}}>\n                <CCardBody className=\"text-center  d-flex justify-content-center align-items-center\">\n                  <div>\n                  <img src={login_image} alt=\"login\"  style={{overflow:\"hidden\",height:\"100%\", width:\"100%\"}}/>\n                    <h2>Sign up</h2>\n                    <p style={{fontSize:\"1.2rem\",fontFamily:\"monospace\"}}>\n                    I didnt choose Diabetes but i can choose how i react to it.\n                    </p>\n                    <Link to=\"/register\" style={{ textDecoration: 'none'}}>\n                    <Button variant=\"contained\">Register</Button>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\nexport default Login\n"],"names":["updateUser","useState","displayError","setdisplayerror","navigate","useNavigate","email","password","userLogin","setuserLogin","handleInput","event","name","target","value","loginUser","e","preventDefault","Axios","then","res","data","success","message","console","log","id","localStorage","setItem","catch","error","className","md","style","boxShadow","TextField","width","autoComplete","onChange","label","type","variant","xs","Button","onClick","to","color","fontStyle","marginLeft","src","login_image","alt","overflow","height","fontSize","fontFamily","textDecoration"],"sourceRoot":""}